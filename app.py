import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

# === CONFIG ===
SHEET_CSV_URL = "https://docs.google.com/spreadsheets/d/12xFNjihxA6EY0yfLpevIrFgqvWY9AwNtsRDJ3608hVI/export?format=csv&gid=0"

# === LOAD & CLEAN DATA ===
@st.cache_data
def load_data():
    df = pd.read_csv(SHEET_CSV_URL, skiprows=4)
    df.columns = df.columns.str.strip()
    df = df.loc[:, ~df.columns.duplicated()]
    df['Date d\'arriv√©e'] = pd.to_datetime(df['Date d\'arriv√©e'], dayfirst=True, errors='coerce')
    df['Date de fin (si applicable)'] = pd.to_datetime(df['Date de fin (si applicable)'], dayfirst=True, errors='coerce')
    df = df[df['Date d\'arriv√©e'].notna()]
    df['Ann√©e arriv√©e'] = df['Date d\'arriv√©e'].dt.year
    df['Mois arriv√©e'] = df['Date d\'arriv√©e'].dt.to_period('M')
    df['Ann√©e fin'] = df['Date de fin (si applicable)'].dt.year
    df['Mois fin'] = df['Date de fin (si applicable)'].dt.to_period('M')
    df['En poste'] = df['Date de fin (si applicable)'].isna() | (df['Date de fin (si applicable)'] > datetime.today())
    df['Type de sortie'] = df['Date de fin (si applicable)'].notna().map({True: 'Sortie', False: 'Pr√©sent'})
    df['Anciennet√©'] = ((pd.to_datetime('today') - df['Date d\'arriv√©e']).dt.days / 365).round(1)
    return df

df = load_data()

def regroup_pole(p):
    if pd.isna(p): return "Autre"
    p = p.lower()
    if "tech" in p: return "Tech"
    if "ops" in p: return "Ops"
    if "codir" in p or "ceo" in p: return "CODIR"
    if "marketing" in p: return "Marketing"
    if "sales" in p or "business" in p: return "Sales"
    if "uk" in p: return "UK"
    if "finance" in p or "rh" in p or "legal" in p or "admin" in p: return "G&A"
    return "Autre"

df["P√¥le regroup√©"] = df["P√¥le associ√©"].apply(regroup_pole)

# === KPI HELPERS ===
def plot_bar(data, x, y, color=None, barmode='group', title=""):
    fig = px.bar(data, x=x, y=y, color=color, barmode=barmode, title=title)
    st.plotly_chart(fig, use_container_width=True)

def plot_line(data, x, y, color=None, title=""):
    fig = px.line(data, x=x, y=y, color=color, title=title)
    st.plotly_chart(fig, use_container_width=True)

# === DASHBOARD ===
st.set_page_config(page_title="Dashboard RH", layout="wide")

st.title("üìä Dashboard RH")

onglet1, onglet2 = st.tabs(["üìÖ KPIs par ann√©e", "üìÜ KPIs par mois"])

with onglet1:
    st.header("Effectifs par contrat et par an")
    effectif_annee = df[df['En poste']].groupby(['Ann√©e arriv√©e', 'Type de contrat']).size().reset_index(name="Effectif")
    plot_bar(effectif_annee, x="Ann√©e arriv√©e", y="Effectif", color="Type de contrat")

    st.header("Entr√©es et sorties par an - par contrat")
    entrees_sorties = pd.concat([
        df.groupby(['Ann√©e arriv√©e', 'Type de contrat']).size().reset_index(name="Nombre").assign(Mouvement="Entr√©e"),
        df[df['Ann√©e fin'].notna()].groupby(['Ann√©e fin', 'Type de contrat']).size().reset_index(name="Nombre").assign(Mouvement="Sortie")
    ])
    entrees_sorties = entrees_sorties.rename(columns={"Ann√©e arriv√©e": "Ann√©e", "Ann√©e fin": "Ann√©e"})
    plot_bar(entrees_sorties, x="Ann√©e", y="Nombre", color="Mouvement")

    st.header("Turnover par grand p√¥le par an")
    turnover_data = df[df['Ann√©e fin'].notna()].groupby(['Ann√©e fin', 'P√¥le regroup√©']).size().reset_index(name="D√©parts")
    effectif_moyen = df.groupby(['Ann√©e arriv√©e', 'P√¥le regroup√©']).size().reset_index(name="Effectif").rename(columns={"Ann√©e arriv√©e": "Ann√©e"})
    turnover = pd.merge(turnover_data, effectif_moyen, on=["Ann√©e", "P√¥le regroup√©"], how="left")
    turnover["Turnover %"] = (turnover["D√©parts"] / turnover["Effectif"] * 100).round(2)
    plot_bar(turnover, x="Ann√©e", y="Turnover %", color="P√¥le regroup√©")

    st.header("Taux de d√©part CDI par p√¥le par an")
    taux_cdi = df[(df['Type de contrat'] == 'CDI') & df['Ann√©e fin'].notna()]
    taux_cdi = taux_cdi.groupby(['Ann√©e fin', 'P√¥le regroup√©']).size().reset_index(name="D√©parts CDI")
    plot_bar(taux_cdi, x="Ann√©e fin", y="D√©parts CDI", color="P√¥le regroup√©")

    st.header("Effectifs CDI moyens par an (hors stagiaires)")
    cdi_actifs = df[(df['Type de contrat'] == 'CDI') & df['En poste']]
    cdi_moyen = cdi_actifs.groupby('Ann√©e arriv√©e').size().reset_index(name="Effectif moyen")
    plot_line(cdi_moyen, x="Ann√©e arriv√©e", y="Effectif moyen")

    st.header("Effectif moyen par an (tous contrats)")
    all_moyen = df[df['En poste']].groupby('Ann√©e arriv√©e').size().reset_index(name="Effectif moyen")
    plot_line(all_moyen, x="Ann√©e arriv√©e", y="Effectif moyen")

    st.header("Turnover total par an")
    total_turnover = df[df['Ann√©e fin'].notna()].groupby('Ann√©e fin').size().reset_index(name="D√©parts")
    total_turnover = pd.merge(total_turnover, all_moyen.rename(columns={"Ann√©e arriv√©e": "Ann√©e fin"}), on="Ann√©e fin", how="left")
    total_turnover["Turnover %"] = (total_turnover["D√©parts"] / total_turnover["Effectif moyen"] * 100).round(2)
    plot_bar(total_turnover, x="Ann√©e fin", y="Turnover %")

    st.header("Taux de d√©part CDI par type de sortie")
    # TODO: Tu peux rajouter une colonne manuelle dans ton GSheet pour pr√©ciser "Volontaire" / "Non volontaire" si tu veux affiner

    st.header("% de ruptures de p√©riode d'essai par an")
    ruptures = df[(df['Type de contrat'] == 'CDI') & (df['Anciennet√©'] < (8/12)) & df['Ann√©e fin'].notna()]
    ruptures = ruptures.groupby('Ann√©e fin').size().reset_index(name="Ruptures PE (<8mois)")
    plot_bar(ruptures, x="Ann√©e fin", y="Ruptures PE (<8mois)")

with onglet2:
    st.header("Effectifs par contrat et par mois")
    effectif_mois = df[df['En poste']].groupby(['Mois arriv√©e', 'Type de contrat']).size().reset_index(name="Effectif")
    effectif_mois['Mois arriv√©e'] = effectif_mois['Mois arriv√©e'].astype(str)
    plot_line(effectif_mois, x="Mois arriv√©e", y="Effectif", color="Type de contrat")

    st.header("Entr√©es et sorties par mois - par contrat")
    entrees_mois = df.groupby(['Mois arriv√©e', 'Type de contrat']).size().reset_index(name="Nombre").assign(Mouvement="Entr√©e")
    sorties_mois = df[df['Mois fin'].notna()].groupby(['Mois fin', 'Type de contrat']).size().reset_index(name="Nombre").assign(Mouvement="Sortie")
    entrees_mois = entrees_mois.rename(columns={"Mois arriv√©e": "Mois"})
    sorties_mois = sorties_mois.rename(columns={"Mois fin": "Mois"})
    mouv_mois = pd.concat([entrees_mois, sorties_mois])
    mouv_mois['Mois'] = mouv_mois['Mois'].astype(str)
    plot_bar(mouv_mois, x="Mois", y="Nombre", color="Mouvement")

    st.header("Suivi mensuel des effectifs par type de contrat")
    suivi = df[df['En poste']].groupby(['Mois arriv√©e', 'Type de contrat']).size().reset_index(name="Effectif")
    suivi['Mois arriv√©e'] = suivi['Mois arriv√©e'].astype(str)
    plot_line(suivi, x="Mois arriv√©e", y="Effectif", color="Type de contrat")

